#include <iostream>
#include <string>
#include <vector>
#include <codecvt>
#include <locale>

using namespace std;

// –§—É–Ω–∫—Ü—ñ—è, —è–∫–∞ –¥–µ–º–æ–Ω—Å—Ç—Ä—É—î –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è append()
void exampleAppend() {
    // –ü—Ä–∏–∫–ª–∞–¥ 1: –∑–ª–∏—Ç—Ç—è –¥–≤–æ—Ö std::string
    std::string –ø—Ä–∏–≤—ñ—Ç–∞–Ω–Ω—è = "–ü—Ä–∏–≤—ñ—Ç, ";
    std::string —ñ–º º—è = "–°–µ—Ä–≥—ñ—é!";
    –ø—Ä–∏–≤—ñ—Ç–∞–Ω–Ω—è.append(—ñ–º º—è);  // –î–æ–¥–∞—î–º–æ —ñ–º º—è –¥–æ –ø—Ä–∏–≤—ñ—Ç–∞–Ω–Ω—è

    std::cout << –ø—Ä–∏–≤—ñ—Ç–∞–Ω–Ω—è << std::endl;  // –í–∏–≤–µ–¥–µ: –ü—Ä–∏–≤—ñ—Ç, –°–µ—Ä–≥—ñ—é!

    // –ü—Ä–∏–∫–ª–∞–¥ 2: –¥–æ–¥–∞–≤–∞–Ω–Ω—è —Å–∏–º–≤–æ–ª—ñ–≤ –∑ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞
    std::vector<char> –∑–Ω–∞—á–µ–Ω–Ω—è = {'2', '3', '.', '5', 'C'};
    std::string —Ç–µ–∫—Å—Ç = "–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞: ";

    // –î–æ–¥–∞—î–º–æ —Å–∏–º–≤–æ–ª–∏ –∑ –≤–µ–∫—Ç–æ—Ä–∞, –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—é—á–∏ —ñ—Ç–µ—Ä–∞—Ç–æ—Ä–∏
    —Ç–µ–∫—Å—Ç.append(–∑–Ω–∞—á–µ–Ω–Ω—è.begin(), –∑–Ω–∞—á–µ–Ω–Ω—è.end());

    std::cout << —Ç–µ–∫—Å—Ç << std::endl;  // –í–∏–≤–µ–¥–µ: –¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞: 23.5C
}

// –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü—ñ—è –∑ UTF‚Äë32 –≤ UTF‚Äë8
std::string to_utf8(const std::u32string& u32) {
    std::wstring_convert<std::codecvt_utf8<char32_t>, char32_t> conv;
    return conv.to_bytes(u32);
}

// –§—É–Ω–∫—Ü—ñ—è, —è–∫–∞ –¥–µ–º–æ–Ω—Å—Ç—Ä—É—î –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è assign()
void exampleAssign() {
    // –ü—Ä–∏–∫–ª–∞–¥ 1: –ü—Ä–∏—Å–≤–æ—î–Ω–Ω—è –Ω–æ–≤–æ–≥–æ –∑–Ω–∞—á–µ–Ω–Ω—è —Ä—è–¥–∫—É –∑ —ñ–Ω—à–æ–≥–æ —Ä—è–¥–∫–∞
    std::u32string —Ä—è–¥–æ–∫;
    const std::u32string –Ω–æ–≤–∏–π–¢–µ–∫—Å—Ç = U"–ü—Ä–∏–≤—ñ—Ç Assign!";
    —Ä—è–¥–æ–∫.assign(–Ω–æ–≤–∏–π–¢–µ–∫—Å—Ç);  // –ö–æ–ø—ñ—é—î–º–æ –∑–Ω–∞—á–µ–Ω–Ω—è –Ω–æ–≤–∏–π–¢–µ–∫—Å—Ç —É —Ä—è–¥–æ–∫

    std::cout << "–†—è–¥–æ–∫ –ø—ñ—Å–ª—è assign –∑ —Ä—è–¥–∫–∞: " << to_utf8(—Ä—è–¥–æ–∫) << std::endl;

    // –ü—Ä–∏–∫–ª–∞–¥ 2: –ü—Ä–∏—Å–≤–æ—î–Ω–Ω—è —Å–∏–º–≤–æ–ª—ñ–≤ –∑ –≤–µ–∫—Ç–æ—Ä–∞
    std::vector<char32_t> –¥–∞–Ω—ñ = {
        U'–ü', U'—Ä', U'–∏', U'–≤', U'—ñ', U'—Ç', U' ',
        U'c', U'h', U'a', U'r', U'3', U'2', U'_', U't', U' ',
        U'\U0001F600',  // emoji üòÄ
        U'Êº¢'           // —ñ—î—Ä–æ–≥–ª—ñ—Ñ
    };
    —Ä—è–¥–æ–∫.assign(–¥–∞–Ω—ñ.begin(), –¥–∞–Ω—ñ.end());  // –ü—Ä–∏—Å–≤–æ—î–Ω–Ω—è –∑ –¥—ñ–∞–ø–∞–∑–æ–Ω—É —ñ—Ç–µ—Ä–∞—Ç–æ—Ä—ñ–≤

    std::cout << "–†—è–¥–æ–∫ –ø—ñ—Å–ª—è assign –∑ –≤–µ–∫—Ç–æ—Ä–∞: " << to_utf8(—Ä—è–¥–æ–∫) << std::endl;

    // –ü—Ä–∏–∫–ª–∞–¥ 3: –ü—Ä–∏—Å–≤–æ—î–Ω–Ω—è –æ–¥–Ω–æ–≥–æ —Å–∏–º–≤–æ–ª—É –∫—ñ–ª—å–∫–∞ —Ä–∞–∑—ñ–≤
    —Ä—è–¥–æ–∫.assign(5, '*');  // ***** (–ø'—è—Ç—å –∑—ñ—Ä–æ—á–æ–∫)

    std::cout << "–†—è–¥–æ–∫ –ø—ñ—Å–ª—è assign —Å–∏–º–≤–æ–ª—É '*': " << to_utf8(—Ä—è–¥–æ–∫) << std::endl;
}

int main() {
    // exampleAppend();
    exampleAssign();

    return 0;
}
