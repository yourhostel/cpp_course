// main.cpp

#include <iostream>
#include <random>
#include <iomanip>
#include <cstring>

using namespace std;

// –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü—ñ—ó –≤–∏–ø–∞–¥–∫–æ–≤–æ–≥–æ —á–∏—Å–ª–∞ —É –∑–∞–¥–∞–Ω–æ–º—É –¥—ñ–∞–ø–∞–∑–æ–Ω—ñ
int randInRange(const int min, const int max) {
    static random_device rd;
    // –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ std::mt19937 –∑–∞–º—ñ—Å—Ç—å rand() –¥–ª—è –±—ñ–ª—å—à —Ä—ñ–≤–Ω–æ–º—ñ—Ä–Ω–æ–≥–æ —Ä–æ–∑–ø–æ–¥—ñ–ª—É
    static mt19937 gen(rd());
    uniform_int_distribution<int> dist(min, max);
    return dist(gen);
}

void printCharCodesFromInput() {
    constexpr size_t N = 20; // –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞ –¥–æ–≤–∂–∏–Ω–∞ —Ä—è–¥–∫–∞
    char c[N]; // –ú–∞—Å–∏–≤ —Å–∏–º–≤–æ–ª—ñ–≤

    cout << "Enter line: ";
    cin.getline(c, N); // –í–≤–µ–¥–µ–Ω–Ω—è —Ä—è–¥–∫–∞

    const size_t t = strlen(c); // –í–∏–∑–Ω–∞—á–µ–Ω–Ω—è –¥–æ–≤–∂–∏–Ω–∏

    for (size_t i = 0; i < t; i++) {
        // –í–∏–≤–æ–¥–∏–º–æ –∑–Ω–∞—á–µ–Ω–Ω—è —Ç–∏–ø—É char (–º–æ–∂–µ –±—É—Ç–∏ –≤—ñ–¥‚Äô—î–º–Ω–∏–º)
        cout << static_cast<int>(c[i]) << " ";
    }

    cout << endl;
}

void replaceDotsAndCount() {
    string input;

    cout << "Enter string: ";
    getline(cin, input); // –ó—á–∏—Ç—É—î–º–æ —Ä—è–¥–æ–∫ –ø–æ–≤–Ω—ñ—Å—Ç—é (–±–µ–∑ –æ–±–º–µ–∂–µ–Ω–Ω—è –±–∞–π—Ç–∞–º–∏)

    size_t symbolCount = 0; // –õ—ñ—á–∏–ª—å–Ω–∏–∫ —Å–∏–º–≤–æ–ª—ñ–≤
    size_t byteIndex = 0;   // –õ—ñ—á–∏–ª—å–Ω–∏–∫ –±–∞–π—Ç—ñ–≤
    int dotCount = 0;       // –õ—ñ—á–∏–ª—å–Ω–∏–∫ –∑–∞–º—ñ–Ω–µ–Ω–∏—Ö –∫—Ä–∞–ø–æ–∫

    // –°–ø–æ—á–∞—Ç–∫—É –ø—ñ–¥—Ä–∞—Ö–æ–≤—É—î–º–æ —Å–∏–º–≤–æ–ª–∏ —Ç–∞ –≤–∏–∑–Ω–∞—á–∞—î–º–æ –ø–æ—Ç—Ä—ñ–±–Ω–∏–π —Ä–æ–∑–º—ñ—Ä –ø–∞–º‚Äô—è—Ç—ñ
    while (byteIndex < input.size()) {
        if ((input[byteIndex] & 0xC0) != 0x80) { // –ü–æ—á–∞—Ç–æ–∫ –Ω–æ–≤–æ–≥–æ —Å–∏–º–≤–æ–ª—É UTF-8
            if (symbolCount == 15) { // –Ø–∫—â–æ –¥–æ—Å—è–≥–ª–∏ 15 —Å–∏–º–≤–æ–ª—ñ–≤, –∑—É–ø–∏–Ω—è—î–º–æ—Å—è
                break;
            }
            symbolCount++;
        }
        byteIndex++;
    }

    // –í–∏–¥—ñ–ª—è—î–º–æ –ø–∞–º‚Äô—è—Ç—å —Ä—ñ–≤–Ω–æ –ø—ñ–¥ 15 —Å–∏–º–≤–æ–ª—ñ–≤ + 1 –¥–ª—è '\0'
    vector<char> result(byteIndex + 1, '\0');

    // –ö–æ–ø—ñ—é—î–º–æ –¥–∞–Ω—ñ –≤ –Ω–æ–≤–∏–π –º–∞—Å–∏–≤, –∑–∞–º—ñ–Ω—é—é—á–∏ '.' –Ω–∞ '_'
    for (size_t i = 0; i < byteIndex; i++) {
        result[i] = (input[i] == '.') ? '_' : input[i];
        if (input[i] == '.') {
            dotCount++; // –ü—ñ–¥—Ä–∞—Ö–æ–≤—É—î–º–æ –∫—ñ–ª—å–∫—ñ—Å—Ç—å –∑–∞–º—ñ–Ω
        }
    }

    cout << "length = " << symbolCount << endl;
    cout << "Number of dots: " << dotCount << endl;
    cout << "Updated string: " << result.data() << endl;
}

int main() {
    // printCharCodesFromInput();
    // replaceDotsAndCount();

    const auto ascii = "A";      // –õ–∞—Ç–∏–Ω—Å—å–∫–∞ –ª—ñ—Ç–µ—Ä–∞ (1 –±–∞–π—Ç)
    const auto cyrillic = "–Ø";   // –ö–∏—Ä–∏–ª–∏—Ü—è (2 –±–∞–π—Ç–∏)
    const auto hieroglyph = "Êº¢"; // –Ü—î—Ä–æ–≥–ª—ñ—Ñ (3 –±–∞–π—Ç–∏)
    const auto emoji = "üòä";     // –ï–º–æ–¥–∑—ñ (4 –±–∞–π—Ç–∏)

    cout << "–õ–∞—Ç–∏–Ω–∏—Ü—è: " << strlen(ascii) << " –±–∞–π—Ç" << endl;
    cout << "–ö–∏—Ä–∏–ª–∏—Ü—è: " << strlen(cyrillic) << " –±–∞–π—Ç–∏" << endl;
    cout << "–Ü—î—Ä–æ–≥–ª—ñ—Ñ: " << strlen(hieroglyph) << " –±–∞–π—Ç–∏" << endl;
    cout << "–ï–º–æ–¥–∑—ñ: " << strlen(emoji) << " –±–∞–π—Ç–∏" << endl;

    return 0;
}
